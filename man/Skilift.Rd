% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Skilift.R
\name{Skilift}
\alias{Skilift}
\title{Skilift Object}
\description{
Class representing a PGV/Case-reports database. Contains metadata, plots, and methods
for interacting with the database and converting to and from JSON.
}
\section{Methods}{

\code{initialize()} Initialize the Skilift object
\code{load_json()} Load data from JSON file into metadata and plots
\code{update_datafiles_json()} Update the JSON data files
\code{to_datatable()} Convert metadata and plots to a single data table
\code{add_plots()} Add new plots to the database
\code{remove_plots()} Remove plots from the database
\code{validate()} Validate metadata and plot data
\code{list_higlass_tilesets()} Upload file to higlass server
\code{upload_to_higlass()} Upload file to higlass server
\code{delete_from_higlass()} Upload file to higlass server
\code{init_pgv()} Download and launch PGV instance
}

\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{datafiles_json_path}}{(`character(1)`)
Path to the datafiles.json}

\item{\code{metadata}}{(`data.table`)\cr
Data table containing patient metadata}

\item{\code{plots}}{(`data.table`)\cr
Data table containing plot metadata}

\item{\code{datadir}}{(`character(1)`).}

\item{\code{settings}}{(`character(1)`).}

\item{\code{higlass_metadata}}{(`list`)\cr
Attribute containing HiGlass metadata}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{datafiles_json_path}}{(`character(1)`)
Path to the datafiles.json}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Skilift-new}{\code{Skilift$new()}}
\item \href{#method-Skilift-load_json}{\code{Skilift$load_json()}}
\item \href{#method-Skilift-update_datafiles_json}{\code{Skilift$update_datafiles_json()}}
\item \href{#method-Skilift-to_datatable}{\code{Skilift$to_datatable()}}
\item \href{#method-Skilift-add_plots}{\code{Skilift$add_plots()}}
\item \href{#method-Skilift-fill_plots_names}{\code{Skilift$fill_plots_names()}}
\item \href{#method-Skilift-add_plots__DEV}{\code{Skilift$add_plots__DEV()}}
\item \href{#method-Skilift-remove_plots}{\code{Skilift$remove_plots()}}
\item \href{#method-Skilift-validate}{\code{Skilift$validate()}}
\item \href{#method-Skilift-list_higlass_tilesets}{\code{Skilift$list_higlass_tilesets()}}
\item \href{#method-Skilift-upload_to_higlass}{\code{Skilift$upload_to_higlass()}}
\item \href{#method-Skilift-delete_from_higlass}{\code{Skilift$delete_from_higlass()}}
\item \href{#method-Skilift-init_pgv}{\code{Skilift$init_pgv()}}
\item \href{#method-Skilift-clone}{\code{Skilift$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Skilift-new"></a>}}
\if{latex}{\out{\hypertarget{method-Skilift-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this [R6][R6::R6Class] class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Skilift$new(
  public_dir = NULL,
  datafiles_json_path = NULL,
  datadir = NULL,
  settings = NULL,
  higlass_metadata = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{public_dir}}{(`character(1)`)\cr
Public or build directory path.}

\item{\code{datafiles_json_path}}{(`character(1)`)\cr
JSON file path.}

\item{\code{datadir}}{(`character(1)`)\cr
Data directory path.}

\item{\code{settings}}{(`character(1)`)\cr
Settings object path.}

\item{\code{higlass_metadata}}{(`list`, optional)\cr
HiGlass metadata containing endpoint, username, and password.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Skilift-load_json"></a>}}
\if{latex}{\out{\hypertarget{method-Skilift-load_json}{}}}
\subsection{Method \code{load_json()}}{
Loads patient metadata and plot data from a JSON file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Skilift$load_json(datafiles_json_path)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datafiles_json_path}}{(`character(1)`)\cr
Datafiles.json file path.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Skilift-update_datafiles_json"></a>}}
\if{latex}{\out{\hypertarget{method-Skilift-update_datafiles_json}{}}}
\subsection{Method \code{update_datafiles_json()}}{
Update the JSON data files with current metadata and plot data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Skilift$update_datafiles_json()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Skilift-to_datatable"></a>}}
\if{latex}{\out{\hypertarget{method-Skilift-to_datatable}{}}}
\subsection{Method \code{to_datatable()}}{
Convert metadata and plots to a single data table.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Skilift$to_datatable(filter = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter}}{(`list()`)\cr
Filter to apply. Consists of two elements: the column to filter on and the string to filter with.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(`data.table`).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Skilift-add_plots"></a>}}
\if{latex}{\out{\hypertarget{method-Skilift-add_plots}{}}}
\subsection{Method \code{add_plots()}}{
Add new plots to the Skilift
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Skilift$add_plots(plots_to_add, cores = 2)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{plots_to_add}}{(`data.table`)\cr
Data table of plots to add. Must have a minimal set of columns: patient.id, x. 
x is either a list of the [server, uuid] or an object (GRanges, gWalk, gGraph, JSON), or a filepath
If adding a new patient, table must include a ref column.}

\item{\code{cores}}{(`number(1)`)\cr
Number of cores to use for parallel execution}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Skilift-fill_plots_names"></a>}}
\if{latex}{\out{\hypertarget{method-Skilift-fill_plots_names}{}}}
\subsection{Method \code{fill_plots_names()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Skilift$fill_plots_names()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Skilift-add_plots__DEV"></a>}}
\if{latex}{\out{\hypertarget{method-Skilift-add_plots__DEV}{}}}
\subsection{Method \code{add_plots__DEV()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Skilift$add_plots__DEV(plots_to_add, cores = 2)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Skilift-remove_plots"></a>}}
\if{latex}{\out{\hypertarget{method-Skilift-remove_plots}{}}}
\subsection{Method \code{remove_plots()}}{
Remove plots from the Skilift
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Skilift$remove_plots(plots_to_remove, delete = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{plots_to_remove}}{(`data.table`)\cr 
Data table of plots to remove}

\item{\code{delete}}{(`logical(1)`)\cr 
Delete plot files if TRUE.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Skilift-validate"></a>}}
\if{latex}{\out{\hypertarget{method-Skilift-validate}{}}}
\subsection{Method \code{validate()}}{
Validate metadata and plot data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Skilift$validate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Skilift-list_higlass_tilesets"></a>}}
\if{latex}{\out{\hypertarget{method-Skilift-list_higlass_tilesets}{}}}
\subsection{Method \code{list_higlass_tilesets()}}{
List tilesets on higlass server
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Skilift$list_higlass_tilesets(
  endpoint = self$higlass_metadata$endpoint,
  username = self$higlass_metadata$username,
  password = self$higlass_metadata$password
)}\if{html}{\out{</div>}}
}

\subsection{Returns}{
tilesets
 Data.table containing list of tilesets
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Skilift-upload_to_higlass"></a>}}
\if{latex}{\out{\hypertarget{method-Skilift-upload_to_higlass}{}}}
\subsection{Method \code{upload_to_higlass()}}{
Upload file to higlass server
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Skilift$upload_to_higlass(
  endpoint = self$higlass_metadata$endpoint,
  patient.id = "TEST_HIGLASS",
  datafile,
  filetype,
  datatype,
  coordSystem,
  name,
  username = self$higlass_metadata$username,
  password = self$higlass_metadata$password
)}\if{html}{\out{</div>}}
}

\subsection{Returns}{
uuid
 The uuid returned by the response from higlass
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Skilift-delete_from_higlass"></a>}}
\if{latex}{\out{\hypertarget{method-Skilift-delete_from_higlass}{}}}
\subsection{Method \code{delete_from_higlass()}}{
Remove files in higlass server
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Skilift$delete_from_higlass(
  patient.id = "TEST_ADD",
  endpoint = self$higlass_metadata$endpoint,
  username = self$higlass_metadata$username,
  password = self$higlass_metadata$password,
  uuids,
  cores = 2
)}\if{html}{\out{</div>}}
}

\subsection{Returns}{
httr:response
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Skilift-init_pgv"></a>}}
\if{latex}{\out{\hypertarget{method-Skilift-init_pgv}{}}}
\subsection{Method \code{init_pgv()}}{
Download and instantiate a PGV instance with symlinked data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Skilift$init_pgv(pgv_dir, build = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pgv_dir}}{(`character(1)`)\cr 
Directory where the pgv instance will be installed}

\item{\code{build}}{(`logical(1)`)\cr 
Flag to indicate whether to build pgv or launch local instance}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Skilift-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Skilift-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Skilift$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
